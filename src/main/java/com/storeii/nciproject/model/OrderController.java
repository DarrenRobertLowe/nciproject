/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.storeii.nciproject.model;

/**
 *
 * @author Main
 */

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;


@RestController // This means that this class is a Controller and @Rest means we don't need to include @ResponseBody
@RequestMapping(path="/webstoredb") // This means URL's start with /webstoredb (after Application path)
public class OrderController {
    // Here we get the beans called X repository (autogenerated by Spring)
    // that allow us to work with the fields.
    @Autowired
    private OrderRepository orderRepository;
    
    @Autowired
    private CustomerRepository customerRepository;
    
    @Autowired
    private AddressRepository addressRepository;
    
    @Autowired
    private DriverRepository driverRepository;
    
    @Autowired
    private LocationRepository locationRepository;
    
    //@Autowired
    //private OrderItemsRepository orderItemsRepository;
    
    
    
    // Add new
    // Note: try catch wrapping here will break the server
    @PostMapping(path="/addOrder") // Map ONLY POST Requests
    public String addOrder (
        @RequestParam String orderStatus,      // this should be set to 1 for new orders
        @RequestParam String customer_ID,
        @RequestParam String address_ID,
        @RequestParam String driver_ID,
        @RequestParam String location_ID
        // @RequestParam String OrderItems_ID
    )
    {
      Order order = new Order();
      
      
      // set fields
      int st = Integer.parseInt(orderStatus);
      int cu = Integer.parseInt(customer_ID);
      int ad = Integer.parseInt(address_ID);
      int dr = Integer.parseInt(driver_ID);
      int lo = Integer.parseInt(location_ID);
      //int oi = Integer.parseInt(OrderItems_ID);
      
      order.setOrderStatus(st);// st);
      order.setCustomer(customerRepository.getById(cu));
      order.setAddress(addressRepository.getById(ad));
      order.setDriver(driverRepository.getById(dr));
      order.setLocation(locationRepository.getById(lo));
      //order.setOrderItems(orderItemsRepository.getById(oi));
      
      orderRepository.save(order);
      return "Saved";
    }
    
    
    // find all
    @GetMapping(path="/getOrders")
    public Iterable<Order> getOrders() {
      return orderRepository.findAll();  // This returns a JSON or XML with the users
    }
    
}