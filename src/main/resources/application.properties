
# this is for connecting to the database, it's the same for jdbc and jpa
#spring.datasource.url=jdbc:mysql://localhost:3306/webstoredb
#spring.datasource.username=root
#spring.datasource.password=password
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#debug=true


# this is for implementing Hibernate's H2 database
#spring.datasource.url=jdbc:mysql://localhost:3306/testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Enabling H2 Console
#spring.h2.console.enabled=true
#spring.data.jpa.repositories.bootstrap-mode=default
#spring.jpa.defer-datasource-initialization=true
#spring.datasource.username=root
#spring.datasource.password=password
#spring.datasource.url=jdbc:h2:file:/data/demo

# SPRING JPA
#set spring.jpa.hibernate.ddl-auto=update when we want to modify database structure
spring.jpa.hibernate.ddl-auto=none
spring.datasource.url=jdbc:mysql://localhost:3306/webstoredb?useSSL=false&allowPublicKeyRetrieval=true
#spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/webstoredb
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql: true

# the following prevents JPA from attempting to add '_' wherever there is a camel case. e.g. customerId would be customer_id and this crashes.
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
#debug=true
logging.level.org.springframework.web=DEBUG

#this is required to get our css and js files to work
spring.resources.add-mappings=true
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false